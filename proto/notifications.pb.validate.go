// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/notifications.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateVirtualUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVirtualUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVirtualUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVirtualUserRequestMultiError, or nil if none found.
func (m *CreateVirtualUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVirtualUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountID

	if len(errors) > 0 {
		return CreateVirtualUserRequestMultiError(errors)
	}
	return nil
}

// CreateVirtualUserRequestMultiError is an error wrapping multiple validation
// errors returned by CreateVirtualUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateVirtualUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVirtualUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVirtualUserRequestMultiError) AllErrors() []error { return m }

// CreateVirtualUserRequestValidationError is the validation error returned by
// CreateVirtualUserRequest.Validate if the designated constraints aren't met.
type CreateVirtualUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVirtualUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVirtualUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVirtualUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVirtualUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVirtualUserRequestValidationError) ErrorName() string {
	return "CreateVirtualUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVirtualUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVirtualUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVirtualUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVirtualUserRequestValidationError{}

// Validate checks the field values on CreateVirtualUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVirtualUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVirtualUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVirtualUserResponseMultiError, or nil if none found.
func (m *CreateVirtualUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVirtualUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountID

	if len(errors) > 0 {
		return CreateVirtualUserResponseMultiError(errors)
	}
	return nil
}

// CreateVirtualUserResponseMultiError is an error wrapping multiple validation
// errors returned by CreateVirtualUserResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateVirtualUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVirtualUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVirtualUserResponseMultiError) AllErrors() []error { return m }

// CreateVirtualUserResponseValidationError is the validation error returned by
// CreateVirtualUserResponse.Validate if the designated constraints aren't met.
type CreateVirtualUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVirtualUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVirtualUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVirtualUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVirtualUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVirtualUserResponseValidationError) ErrorName() string {
	return "CreateVirtualUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVirtualUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVirtualUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVirtualUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVirtualUserResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccountID()) < 1 {
		err := GetUserRequestValidationError{
			field:  "AccountID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}
	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}
	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on AddUserTagRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddUserTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserTagRequestMultiError, or nil if none found.
func (m *AddUserTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccountID()) < 1 {
		err := AddUserTagRequestValidationError{
			field:  "AccountID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTag()) < 1 {
		err := AddUserTagRequestValidationError{
			field:  "Tag",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddUserTagRequestMultiError(errors)
	}
	return nil
}

// AddUserTagRequestMultiError is an error wrapping multiple validation errors
// returned by AddUserTagRequest.ValidateAll() if the designated constraints
// aren't met.
type AddUserTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserTagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserTagRequestMultiError) AllErrors() []error { return m }

// AddUserTagRequestValidationError is the validation error returned by
// AddUserTagRequest.Validate if the designated constraints aren't met.
type AddUserTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserTagRequestValidationError) ErrorName() string {
	return "AddUserTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserTagRequestValidationError{}

// Validate checks the field values on AddUserTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserTagResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserTagResponseMultiError, or nil if none found.
func (m *AddUserTagResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserTagResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddUserTagResponseMultiError(errors)
	}
	return nil
}

// AddUserTagResponseMultiError is an error wrapping multiple validation errors
// returned by AddUserTagResponse.ValidateAll() if the designated constraints
// aren't met.
type AddUserTagResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserTagResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserTagResponseMultiError) AllErrors() []error { return m }

// AddUserTagResponseValidationError is the validation error returned by
// AddUserTagResponse.Validate if the designated constraints aren't met.
type AddUserTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserTagResponseValidationError) ErrorName() string {
	return "AddUserTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserTagResponseValidationError{}

// Validate checks the field values on DeleteUserTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserTagRequestMultiError, or nil if none found.
func (m *DeleteUserTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccountID()) < 1 {
		err := DeleteUserTagRequestValidationError{
			field:  "AccountID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTag()) < 1 {
		err := DeleteUserTagRequestValidationError{
			field:  "Tag",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserTagRequestMultiError(errors)
	}
	return nil
}

// DeleteUserTagRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserTagRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserTagRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserTagRequestMultiError) AllErrors() []error { return m }

// DeleteUserTagRequestValidationError is the validation error returned by
// DeleteUserTagRequest.Validate if the designated constraints aren't met.
type DeleteUserTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserTagRequestValidationError) ErrorName() string {
	return "DeleteUserTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserTagRequestValidationError{}

// Validate checks the field values on DeleteUserTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserTagResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserTagResponseMultiError, or nil if none found.
func (m *DeleteUserTagResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserTagResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserTagResponseMultiError(errors)
	}
	return nil
}

// DeleteUserTagResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUserTagResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserTagResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserTagResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserTagResponseMultiError) AllErrors() []error { return m }

// DeleteUserTagResponseValidationError is the validation error returned by
// DeleteUserTagResponse.Validate if the designated constraints aren't met.
type DeleteUserTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserTagResponseValidationError) ErrorName() string {
	return "DeleteUserTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserTagResponseValidationError{}

// Validate checks the field values on SendTagPushRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendTagPushRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTagPushRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTagPushRequestMultiError, or nil if none found.
func (m *SendTagPushRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTagPushRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTag()) < 1 {
		err := SendTagPushRequestValidationError{
			field:  "Tag",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendTagPushRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendTagPushRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendTagPushRequestValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendTagPushRequestMultiError(errors)
	}
	return nil
}

// SendTagPushRequestMultiError is an error wrapping multiple validation errors
// returned by SendTagPushRequest.ValidateAll() if the designated constraints
// aren't met.
type SendTagPushRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTagPushRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTagPushRequestMultiError) AllErrors() []error { return m }

// SendTagPushRequestValidationError is the validation error returned by
// SendTagPushRequest.Validate if the designated constraints aren't met.
type SendTagPushRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTagPushRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTagPushRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTagPushRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTagPushRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTagPushRequestValidationError) ErrorName() string {
	return "SendTagPushRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendTagPushRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTagPushRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTagPushRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTagPushRequestValidationError{}

// Validate checks the field values on SendTagPushResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendTagPushResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTagPushResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTagPushResponseMultiError, or nil if none found.
func (m *SendTagPushResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTagPushResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendTagPushResponseMultiError(errors)
	}
	return nil
}

// SendTagPushResponseMultiError is an error wrapping multiple validation
// errors returned by SendTagPushResponse.ValidateAll() if the designated
// constraints aren't met.
type SendTagPushResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTagPushResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTagPushResponseMultiError) AllErrors() []error { return m }

// SendTagPushResponseValidationError is the validation error returned by
// SendTagPushResponse.Validate if the designated constraints aren't met.
type SendTagPushResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTagPushResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTagPushResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTagPushResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTagPushResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTagPushResponseValidationError) ErrorName() string {
	return "SendTagPushResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendTagPushResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTagPushResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTagPushResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTagPushResponseValidationError{}

// Validate checks the field values on SendUserPushRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserPushRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserPushRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserPushRequestMultiError, or nil if none found.
func (m *SendUserPushRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserPushRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccountID()) < 1 {
		err := SendUserPushRequestValidationError{
			field:  "AccountID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendUserPushRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendUserPushRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendUserPushRequestValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendUserPushRequestMultiError(errors)
	}
	return nil
}

// SendUserPushRequestMultiError is an error wrapping multiple validation
// errors returned by SendUserPushRequest.ValidateAll() if the designated
// constraints aren't met.
type SendUserPushRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserPushRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserPushRequestMultiError) AllErrors() []error { return m }

// SendUserPushRequestValidationError is the validation error returned by
// SendUserPushRequest.Validate if the designated constraints aren't met.
type SendUserPushRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserPushRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserPushRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserPushRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserPushRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserPushRequestValidationError) ErrorName() string {
	return "SendUserPushRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserPushRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserPushRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserPushRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserPushRequestValidationError{}

// Validate checks the field values on SendUserPushResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendUserPushResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendUserPushResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendUserPushResponseMultiError, or nil if none found.
func (m *SendUserPushResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserPushResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendUserPushResponseMultiError(errors)
	}
	return nil
}

// SendUserPushResponseMultiError is an error wrapping multiple validation
// errors returned by SendUserPushResponse.ValidateAll() if the designated
// constraints aren't met.
type SendUserPushResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserPushResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserPushResponseMultiError) AllErrors() []error { return m }

// SendUserPushResponseValidationError is the validation error returned by
// SendUserPushResponse.Validate if the designated constraints aren't met.
type SendUserPushResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserPushResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserPushResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserPushResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserPushResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserPushResponseValidationError) ErrorName() string {
	return "SendUserPushResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserPushResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserPushResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserPushResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserPushResponseValidationError{}

// Validate checks the field values on SendDevicePushRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendDevicePushRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendDevicePushRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendDevicePushRequestMultiError, or nil if none found.
func (m *SendDevicePushRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendDevicePushRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeviceID()) < 1 {
		err := SendDevicePushRequestValidationError{
			field:  "DeviceID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendDevicePushRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendDevicePushRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendDevicePushRequestValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendDevicePushRequestMultiError(errors)
	}
	return nil
}

// SendDevicePushRequestMultiError is an error wrapping multiple validation
// errors returned by SendDevicePushRequest.ValidateAll() if the designated
// constraints aren't met.
type SendDevicePushRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendDevicePushRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendDevicePushRequestMultiError) AllErrors() []error { return m }

// SendDevicePushRequestValidationError is the validation error returned by
// SendDevicePushRequest.Validate if the designated constraints aren't met.
type SendDevicePushRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendDevicePushRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendDevicePushRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendDevicePushRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendDevicePushRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendDevicePushRequestValidationError) ErrorName() string {
	return "SendDevicePushRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendDevicePushRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendDevicePushRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendDevicePushRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendDevicePushRequestValidationError{}

// Validate checks the field values on SendDevicePushResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendDevicePushResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendDevicePushResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendDevicePushResponseMultiError, or nil if none found.
func (m *SendDevicePushResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendDevicePushResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendDevicePushResponseMultiError(errors)
	}
	return nil
}

// SendDevicePushResponseMultiError is an error wrapping multiple validation
// errors returned by SendDevicePushResponse.ValidateAll() if the designated
// constraints aren't met.
type SendDevicePushResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendDevicePushResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendDevicePushResponseMultiError) AllErrors() []error { return m }

// SendDevicePushResponseValidationError is the validation error returned by
// SendDevicePushResponse.Validate if the designated constraints aren't met.
type SendDevicePushResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendDevicePushResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendDevicePushResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendDevicePushResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendDevicePushResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendDevicePushResponseValidationError) ErrorName() string {
	return "SendDevicePushResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendDevicePushResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendDevicePushResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendDevicePushResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendDevicePushResponseValidationError{}

// Validate checks the field values on AddDeviceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDeviceRequestMultiError, or nil if none found.
func (m *AddDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeviceInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDeviceRequestValidationError{
					field:  "DeviceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDeviceRequestValidationError{
					field:  "DeviceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeviceInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDeviceRequestValidationError{
				field:  "DeviceInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeviceID

	if len(errors) > 0 {
		return AddDeviceRequestMultiError(errors)
	}
	return nil
}

// AddDeviceRequestMultiError is an error wrapping multiple validation errors
// returned by AddDeviceRequest.ValidateAll() if the designated constraints
// aren't met.
type AddDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDeviceRequestMultiError) AllErrors() []error { return m }

// AddDeviceRequestValidationError is the validation error returned by
// AddDeviceRequest.Validate if the designated constraints aren't met.
type AddDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDeviceRequestValidationError) ErrorName() string { return "AddDeviceRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDeviceRequestValidationError{}

// Validate checks the field values on AddDeviceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDeviceResponseMultiError, or nil if none found.
func (m *AddDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceID

	if len(errors) > 0 {
		return AddDeviceResponseMultiError(errors)
	}
	return nil
}

// AddDeviceResponseMultiError is an error wrapping multiple validation errors
// returned by AddDeviceResponse.ValidateAll() if the designated constraints
// aren't met.
type AddDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDeviceResponseMultiError) AllErrors() []error { return m }

// AddDeviceResponseValidationError is the validation error returned by
// AddDeviceResponse.Validate if the designated constraints aren't met.
type AddDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDeviceResponseValidationError) ErrorName() string {
	return "AddDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDeviceResponseValidationError{}

// Validate checks the field values on DeleteDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeviceRequestMultiError, or nil if none found.
func (m *DeleteDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceID

	if len(errors) > 0 {
		return DeleteDeviceRequestMultiError(errors)
	}
	return nil
}

// DeleteDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeviceRequestMultiError) AllErrors() []error { return m }

// DeleteDeviceRequestValidationError is the validation error returned by
// DeleteDeviceRequest.Validate if the designated constraints aren't met.
type DeleteDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeviceRequestValidationError) ErrorName() string {
	return "DeleteDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeviceRequestValidationError{}

// Validate checks the field values on DeleteDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeviceResponseMultiError, or nil if none found.
func (m *DeleteDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDeviceResponseMultiError(errors)
	}
	return nil
}

// DeleteDeviceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDeviceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeviceResponseMultiError) AllErrors() []error { return m }

// DeleteDeviceResponseValidationError is the validation error returned by
// DeleteDeviceResponse.Validate if the designated constraints aren't met.
type DeleteDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeviceResponseValidationError) ErrorName() string {
	return "DeleteDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeviceResponseValidationError{}
